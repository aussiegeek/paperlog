import Papa from "papaparse";
import * as fs from "fs";
import prettier from "prettier";

function parseFile<T>(filename: string) {
  const data = fs.readFileSync(`${__dirname}/../adif_csv/${filename}`, "utf8");
  const result = Papa.parse<T>(data, { header: true, skipEmptyLines: true });
  if (result.errors.length > 0) {
    console.error("Error parsing file", filename, result.errors);
    process.exit(1);
  }
  return result;
}

function writeTypes(filename: string, contents: string) {
  fs.writeFileSync(
    `${__dirname}/../src/adif/${filename}`,
    prettier.format(contents, { parser: "typescript" })
  );
}

function parseBands() {
  const result = parseFile<{
    "Enumeration Name": string;
    Band: string;
    "Lower Freq (MHz)": string;
    "Upper Freq (MHz)": string;
    "Import-only": string;
    Comments: string;
    "ADIF Version": string;
    "ADIF Status": string;
  }>("enumerations_band.csv");

  const bandData: Record<string, object> = {};

  result.data.forEach((data) => {
    const band = data["Band"];

    bandData[band] = {
      from: Number.parseFloat(data["Lower Freq (MHz)"]),
      to: Number.parseFloat(data["Upper Freq (MHz)"]),
    };

    const output = `
    // generated by scripts/adif_tables.ts
    import { enums } from "superstruct";

    export const bands = ${JSON.stringify(Object.keys(bandData))} as const;

    type BandRange = { [K in typeof bands[number]]: { from: number; to: number } };
    const bandData: BandRange = ${JSON.stringify(bandData)};

    export const BandEnum = enums(bands);

    export const bandRange: BandRange = bandData;
    `;
    writeTypes("bands.ts", output);
  });
}

parseBands();
